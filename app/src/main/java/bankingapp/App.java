/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package bankingapp;

import org.sqlite.SQLiteDataSource;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Random;
import java.util.Scanner;

public class App {
    static Scanner input = new Scanner(System.in);
    static SQLiteDataSource dataSource = new SQLiteDataSource();

    public static void main(String[] args) {
        //String url set as program parameter
        dataSource.setUrl(args[0]);

        //Connect to the database
        try (Connection con = dataSource.getConnection()) {
            try (Statement statement = con.createStatement()) {

                //Create DB
                createDB(statement);

                //Initialize response and Map
                int response = -1;
                HashMap<String, Integer> account = new HashMap<>();

                do {

                    System.out.println("\n1. Create an account\n" +
                            "2. Log into account\n" +
                            "0. Exit");

                    response = input.nextInt();
                    switch (response) {
                        case 1:
                            createAccount(statement,account);
                            break;
                        case 2:
                            logIn(account);
                    }
                } while (response != 0);

                System.out.println("\nBye!");

            } catch (SQLException e) {
                e.printStackTrace();
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    public static void createAccount (Statement statement, HashMap<String, Integer> account) throws SQLException {
        Random rand = new Random();
        Random rand2 = new Random();
        long upper = 999999999L;
        long lower = 100000000L;
        String accountNum = "400000" + (rand.nextLong( upper - lower + 1) + lower);

        accountNum = checkSum(accountNum);

        int pinNum = rand2.nextInt(9999 - 1000 + 1) + 1000;
        System.out.println("\nYour card has been created\nYour card number:\n" + accountNum +
                "\nYour card PIN:\n" + pinNum);
        account.put(accountNum, pinNum);
        insertDB(statement, accountNum, String.valueOf(pinNum));
        //statement.executeUpdate("INSERT INTO card (number, pin) VALUES ('"+accountNum+"','"+pinNum+"')");
    }


    //Luhn's Algorithm to check card validity
    public static String checkSum(String accountNum){
        char numChar;
        int numInteger;
        int sum = 0;
        final int MAX_NUM = 10;
        int checkSum = 0;
        for (int i = 0; i < accountNum.length(); i++) {
            numChar = accountNum.charAt(i);
            numInteger = Integer.parseInt(String.valueOf(numChar));

            if (i % 2 == 0) {
                numInteger *= 2;
            }

            if (numInteger > 9) {
                numInteger -= 9;
            }

            sum += numInteger;
        }

        for (int i = 0; i < MAX_NUM; i++) {
            if ((sum + i) % 10 == 0) {
                checkSum = i;
            }
        }
        return accountNum + checkSum;
    }

    public static void logIn (HashMap<String, Integer> account) {
        int response = -1;

            System.out.println("\nEnter your card number:");
            String ans = input.next();
            System.out.println("Enter your PIN:");
            int resp = input.nextInt();

            if (account.containsKey(ans) && account.get(ans).equals(resp)) {
                System.out.println("\nsuccessfully logged in");
                int answer = -1;
                int balance = 0;

               subModule:
                do {
                    System.out.println("\n1. Balance\n" +
                            "2. Log out\n" +
                            "0. Exit");

                    answer = input.nextInt();

                    switch (answer) {
                        case 1:
                            System.out.println("\nBalance: " + balance);
                            break;
                        case 2:
                            System.out.println("\nYou have successfully logged out");
                            break subModule;
                        case 0:
                            System.exit(0);
                    }
                } while (answer != 0);


            } else {
                System.out.println("Wrong card number or PIN");
            }

    }

    public static void createDB(Statement statement) throws SQLException{
        statement.executeUpdate("CREATE TABLE IF NOT EXISTS card(" +
                        "id INTEGER, " +
                        "num TEXT," +
                        "pin TEXT," +
                        "balance INTEGER DEFAULT 0)");

    }

    public static void insertDB(Statement statement, String number, String pinNum) throws SQLException{
        statement.executeUpdate("INSERT INTO card (num,pin)VALUES ('"+number+"', '"+pinNum+"')");
    }
}
